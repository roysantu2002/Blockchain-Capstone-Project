// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps

    
// Test verification with incorrect proof

// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const SquareVerifier = artifacts.require('SquareVerifier');
const truffleAssert = require('truffle-assertions');


// Test verification with incorrect proof
contract('Test Verifier', accounts => {
    describe('test verification', () => {
        beforeEach(async () => {
            this.contract = await SquareVerifier.new({from: accounts[0]});
        });

        // Test verification with correct proof
        // - use the contents from proof.json generated from zokrates steps
        // using proof.json from 25**2 == 625 (correct)
        it('should return true using correct proof', async () => {
            let isValid = await this.contract.verifyTx.call(
                ["0x1e8d756b4c31ae22326b587d569feac78a23ec7a9c3876c59ddca6a68e976c64", "0x23cef095ac2ba68ad1818af4030f9592594475ec8f9c2e25dc2ac79c01730169"],
                [["0x14e4b702eca9f62fea74a0044bd9e98d59e837397f3aa06654ac77293479050a", "0x0ff4c97f35b5265a35d14b41ac8810ac17c38580802f74dbc72fd73e80ec63e0"], ["0x20b42b9cc8aab96c5817452179d40de49bb49c988b06278195b9c1b7981aebe1", "0x08f8bdf850e91cd073cd5b02ee4d4a6fdc0695653e74e0c510488f98aa95d114"]],
                ["0x1ee25060c69eec2861b3a17eb705c28151708e71939b8cb2935c2dc6e82020f9", "0x2bf819edf4f0b7c58c07b16728b9b30d2ca1451afda66ff673d1b57dd00d2c5e"],
                ["0x0000000000000000000000000000000000000000000000000000000000000009", "0x0000000000000000000000000000000000000000000000000000000000000001"],
            );
            assert.equal(isValid, true, "False negative");
        });

        // using false-proof.json from 24**2 == 600 (incorrect)
        // but with input as true (0x000...01) instead of false (0x000...00)
        it('should return false using incorrect proof', async () => {
            let isValid = await this.contract.verifyTx.call(
                ["0x1e8d756b4c31ae22326b587d569feac78a23ec7a9c3876c59ddca6a68e976c64", "0x23cef095ac2ba68ad1818af4030f9592594475ec8f9c2e25dc2ac79c01730169"],
                [["0x14e4b702eca9f62fea74a0044bd9e98d59e837397f3aa06654ac77293479050a", "0x0ff4c97f35b5265a35d14b41ac8810ac17c38580802f74dbc72fd73e80ec63e0"], ["0x20b42b9cc8aab96c5817452179d40de49bb49c988b06278195b9c1b7981aebe1", "0x08f8bdf850e91cd073cd5b02ee4d4a6fdc0695653e74e0c510488f98aa95d114"]],
                ["0x1ee25060c69eec2861b3a17eb705c28151708e71939b8cb2935c2dc6e82020f9", "0x2bf819edf4f0b7c58c07b16728b9b30d2ca1451afda66ff673d1b57dd00d2c5e"],
                ["0x0000000000000000000000000000000000000000000000000000000000000119", "0x0000000000000000000000000000000000000000000000000000000000000001"],
            );
            assert.equal(isValid, false, "False positive");
        });
    });
});
